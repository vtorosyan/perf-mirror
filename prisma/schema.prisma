// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Category {
  id             String      @id @default(cuid())
  name           String      @unique
  scorePerOccurrence Int
  dimension      String      // input, output, outcome, impact
  description    String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  weeklyLogs     WeeklyLog[]
}

model WeeklyLog {
  id         String   @id @default(cuid())
  categoryId String
  week       String   // Format: "2024-W01"
  count      Int
  overrideScore Int?   // Optional override for calculated score
  reference  String?  // Optional reference (URL, ticket number, etc.)
  createdAt  DateTime @default(now())
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, week])
}

model PerformanceTarget {
  id                    String   @id @default(cuid())
  name                  String   // "IC Performance Target", "Senior Manager Target", etc.
  role                  String   // "IC" or "Manager"
  level                 Int?     // Level number (optional - null means applies to all levels of that role)
  outstandingThreshold  Int      @default(300)  // Outstanding (>150% baseline)
  strongThreshold       Int      @default(230)  // Strong Performance (115-150% baseline)
  meetingThreshold      Int      @default(170)  // Meeting Expectations (85-115% baseline)
  partialThreshold      Int      @default(140)  // Partially Meeting Expectations (70-85% baseline)
  underperformingThreshold Int   @default(120)  // Underperforming (<70% baseline)
  timePeriodWeeks       Int      @default(12)
  isActive              Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@unique([role, level, name])
}

model RoleWeights {
  id            String   @id @default(cuid())
  name          String   // "IC L3 Weights", "Manager L6 Weights", etc.
  role          String   // "IC" or "Manager"
  level         Int?     // Level number (optional - null means applies to all levels of that role)
  inputWeight   Float    @default(0.25)
  outputWeight  Float    @default(0.35)
  outcomeWeight Float    @default(0.25)
  impactWeight  Float    @default(0.15)
  isActive      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([role, level, name])
}

model UserProfile {
  id        String   @id @default(cuid())
  role      String   // "IC" or "Manager"
  level     Int      // 1-8 for ICs, 4-8 for Managers
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LevelExpectation {
  id          String   @id @default(cuid())
  role        String   // "IC" or "Manager"
  level       Int      // Level number
  expectations String  // JSON array of expectation strings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([role, level])
}

model CategoryTemplate {
  id                    String   @id @default(cuid())
  role                  String   // "IC" or "Manager"
  level                 Int      // Level number
  categoryName          String   
  dimension             String   // input, output, outcome, impact
  scorePerOccurrence    Int
  expectedWeeklyCount   Float    // Expected average weekly count
  description           String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@unique([role, level, categoryName])
} 